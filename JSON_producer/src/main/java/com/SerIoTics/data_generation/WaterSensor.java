/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.SerIoTics.data_generation;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WaterSensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WaterSensor\",\"namespace\":\"com.SerIoTics.data_generation\",\"fields\":[{\"name\":\"quantity\",\"type\":\"float\"},{\"name\":\"major_area_num\",\"type\":\"int\"},{\"name\":\"minor_area_num\",\"type\":\"int\"},{\"name\":\"time_since_turn_on\",\"type\":\"int\"},{\"name\":\"unique_id\",\"type\":\"long\"},{\"name\":\"runtime\",\"type\":\"long\"},{\"name\":\"minType\",\"type\":\"string\"},{\"name\":\"majType\",\"type\":\"string\"},{\"name\":\"item_sensed\",\"type\":\"string\"},{\"name\":\"subject_measured\",\"type\":\"string\"},{\"name\":\"sensor_location_name\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float quantity;
  @Deprecated public int major_area_num;
  @Deprecated public int minor_area_num;
  @Deprecated public int time_since_turn_on;
  @Deprecated public long unique_id;
  @Deprecated public long runtime;
  @Deprecated public java.lang.CharSequence minType;
  @Deprecated public java.lang.CharSequence majType;
  @Deprecated public java.lang.CharSequence item_sensed;
  @Deprecated public java.lang.CharSequence subject_measured;
  @Deprecated public java.lang.CharSequence sensor_location_name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public WaterSensor() {}

  /**
   * All-args constructor.
   */
  public WaterSensor(java.lang.Float quantity, java.lang.Integer major_area_num, java.lang.Integer minor_area_num, java.lang.Integer time_since_turn_on, java.lang.Long unique_id, java.lang.Long runtime, java.lang.CharSequence minType, java.lang.CharSequence majType, java.lang.CharSequence item_sensed, java.lang.CharSequence subject_measured, java.lang.CharSequence sensor_location_name) {
    this.quantity = quantity;
    this.major_area_num = major_area_num;
    this.minor_area_num = minor_area_num;
    this.time_since_turn_on = time_since_turn_on;
    this.unique_id = unique_id;
    this.runtime = runtime;
    this.minType = minType;
    this.majType = majType;
    this.item_sensed = item_sensed;
    this.subject_measured = subject_measured;
    this.sensor_location_name = sensor_location_name;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return quantity;
    case 1: return major_area_num;
    case 2: return minor_area_num;
    case 3: return time_since_turn_on;
    case 4: return unique_id;
    case 5: return runtime;
    case 6: return minType;
    case 7: return majType;
    case 8: return item_sensed;
    case 9: return subject_measured;
    case 10: return sensor_location_name;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: quantity = (java.lang.Float)value$; break;
    case 1: major_area_num = (java.lang.Integer)value$; break;
    case 2: minor_area_num = (java.lang.Integer)value$; break;
    case 3: time_since_turn_on = (java.lang.Integer)value$; break;
    case 4: unique_id = (java.lang.Long)value$; break;
    case 5: runtime = (java.lang.Long)value$; break;
    case 6: minType = (java.lang.CharSequence)value$; break;
    case 7: majType = (java.lang.CharSequence)value$; break;
    case 8: item_sensed = (java.lang.CharSequence)value$; break;
    case 9: subject_measured = (java.lang.CharSequence)value$; break;
    case 10: sensor_location_name = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'quantity' field.
   */
  public java.lang.Float getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Float value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'major_area_num' field.
   */
  public java.lang.Integer getMajorAreaNum() {
    return major_area_num;
  }

  /**
   * Sets the value of the 'major_area_num' field.
   * @param value the value to set.
   */
  public void setMajorAreaNum(java.lang.Integer value) {
    this.major_area_num = value;
  }

  /**
   * Gets the value of the 'minor_area_num' field.
   */
  public java.lang.Integer getMinorAreaNum() {
    return minor_area_num;
  }

  /**
   * Sets the value of the 'minor_area_num' field.
   * @param value the value to set.
   */
  public void setMinorAreaNum(java.lang.Integer value) {
    this.minor_area_num = value;
  }

  /**
   * Gets the value of the 'time_since_turn_on' field.
   */
  public java.lang.Integer getTimeSinceTurnOn() {
    return time_since_turn_on;
  }

  /**
   * Sets the value of the 'time_since_turn_on' field.
   * @param value the value to set.
   */
  public void setTimeSinceTurnOn(java.lang.Integer value) {
    this.time_since_turn_on = value;
  }

  /**
   * Gets the value of the 'unique_id' field.
   */
  public java.lang.Long getUniqueId() {
    return unique_id;
  }

  /**
   * Sets the value of the 'unique_id' field.
   * @param value the value to set.
   */
  public void setUniqueId(java.lang.Long value) {
    this.unique_id = value;
  }

  /**
   * Gets the value of the 'runtime' field.
   */
  public java.lang.Long getRuntime() {
    return runtime;
  }

  /**
   * Sets the value of the 'runtime' field.
   * @param value the value to set.
   */
  public void setRuntime(java.lang.Long value) {
    this.runtime = value;
  }

  /**
   * Gets the value of the 'minType' field.
   */
  public java.lang.CharSequence getMinType() {
    return minType;
  }

  /**
   * Sets the value of the 'minType' field.
   * @param value the value to set.
   */
  public void setMinType(java.lang.CharSequence value) {
    this.minType = value;
  }

  /**
   * Gets the value of the 'majType' field.
   */
  public java.lang.CharSequence getMajType() {
    return majType;
  }

  /**
   * Sets the value of the 'majType' field.
   * @param value the value to set.
   */
  public void setMajType(java.lang.CharSequence value) {
    this.majType = value;
  }

  /**
   * Gets the value of the 'item_sensed' field.
   */
  public java.lang.CharSequence getItemSensed() {
    return item_sensed;
  }

  /**
   * Sets the value of the 'item_sensed' field.
   * @param value the value to set.
   */
  public void setItemSensed(java.lang.CharSequence value) {
    this.item_sensed = value;
  }

  /**
   * Gets the value of the 'subject_measured' field.
   */
  public java.lang.CharSequence getSubjectMeasured() {
    return subject_measured;
  }

  /**
   * Sets the value of the 'subject_measured' field.
   * @param value the value to set.
   */
  public void setSubjectMeasured(java.lang.CharSequence value) {
    this.subject_measured = value;
  }

  /**
   * Gets the value of the 'sensor_location_name' field.
   */
  public java.lang.CharSequence getSensorLocationName() {
    return sensor_location_name;
  }

  /**
   * Sets the value of the 'sensor_location_name' field.
   * @param value the value to set.
   */
  public void setSensorLocationName(java.lang.CharSequence value) {
    this.sensor_location_name = value;
  }

  /** Creates a new WaterSensor RecordBuilder */
  public static com.SerIoTics.data_generation.WaterSensor.Builder newBuilder() {
    return new com.SerIoTics.data_generation.WaterSensor.Builder();
  }
  
  /** Creates a new WaterSensor RecordBuilder by copying an existing Builder */
  public static com.SerIoTics.data_generation.WaterSensor.Builder newBuilder(com.SerIoTics.data_generation.WaterSensor.Builder other) {
    return new com.SerIoTics.data_generation.WaterSensor.Builder(other);
  }
  
  /** Creates a new WaterSensor RecordBuilder by copying an existing WaterSensor instance */
  public static com.SerIoTics.data_generation.WaterSensor.Builder newBuilder(com.SerIoTics.data_generation.WaterSensor other) {
    return new com.SerIoTics.data_generation.WaterSensor.Builder(other);
  }
  
  /**
   * RecordBuilder for WaterSensor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WaterSensor>
    implements org.apache.avro.data.RecordBuilder<WaterSensor> {

    private float quantity;
    private int major_area_num;
    private int minor_area_num;
    private int time_since_turn_on;
    private long unique_id;
    private long runtime;
    private java.lang.CharSequence minType;
    private java.lang.CharSequence majType;
    private java.lang.CharSequence item_sensed;
    private java.lang.CharSequence subject_measured;
    private java.lang.CharSequence sensor_location_name;

    /** Creates a new Builder */
    private Builder() {
      super(com.SerIoTics.data_generation.WaterSensor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.SerIoTics.data_generation.WaterSensor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.quantity)) {
        this.quantity = data().deepCopy(fields()[0].schema(), other.quantity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.major_area_num)) {
        this.major_area_num = data().deepCopy(fields()[1].schema(), other.major_area_num);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.minor_area_num)) {
        this.minor_area_num = data().deepCopy(fields()[2].schema(), other.minor_area_num);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time_since_turn_on)) {
        this.time_since_turn_on = data().deepCopy(fields()[3].schema(), other.time_since_turn_on);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.unique_id)) {
        this.unique_id = data().deepCopy(fields()[4].schema(), other.unique_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runtime)) {
        this.runtime = data().deepCopy(fields()[5].schema(), other.runtime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.minType)) {
        this.minType = data().deepCopy(fields()[6].schema(), other.minType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.majType)) {
        this.majType = data().deepCopy(fields()[7].schema(), other.majType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.item_sensed)) {
        this.item_sensed = data().deepCopy(fields()[8].schema(), other.item_sensed);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.subject_measured)) {
        this.subject_measured = data().deepCopy(fields()[9].schema(), other.subject_measured);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sensor_location_name)) {
        this.sensor_location_name = data().deepCopy(fields()[10].schema(), other.sensor_location_name);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing WaterSensor instance */
    private Builder(com.SerIoTics.data_generation.WaterSensor other) {
            super(com.SerIoTics.data_generation.WaterSensor.SCHEMA$);
      if (isValidValue(fields()[0], other.quantity)) {
        this.quantity = data().deepCopy(fields()[0].schema(), other.quantity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.major_area_num)) {
        this.major_area_num = data().deepCopy(fields()[1].schema(), other.major_area_num);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.minor_area_num)) {
        this.minor_area_num = data().deepCopy(fields()[2].schema(), other.minor_area_num);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time_since_turn_on)) {
        this.time_since_turn_on = data().deepCopy(fields()[3].schema(), other.time_since_turn_on);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.unique_id)) {
        this.unique_id = data().deepCopy(fields()[4].schema(), other.unique_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runtime)) {
        this.runtime = data().deepCopy(fields()[5].schema(), other.runtime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.minType)) {
        this.minType = data().deepCopy(fields()[6].schema(), other.minType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.majType)) {
        this.majType = data().deepCopy(fields()[7].schema(), other.majType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.item_sensed)) {
        this.item_sensed = data().deepCopy(fields()[8].schema(), other.item_sensed);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.subject_measured)) {
        this.subject_measured = data().deepCopy(fields()[9].schema(), other.subject_measured);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sensor_location_name)) {
        this.sensor_location_name = data().deepCopy(fields()[10].schema(), other.sensor_location_name);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'quantity' field */
    public java.lang.Float getQuantity() {
      return quantity;
    }
    
    /** Sets the value of the 'quantity' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setQuantity(float value) {
      validate(fields()[0], value);
      this.quantity = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'quantity' field has been set */
    public boolean hasQuantity() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'quantity' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearQuantity() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'major_area_num' field */
    public java.lang.Integer getMajorAreaNum() {
      return major_area_num;
    }
    
    /** Sets the value of the 'major_area_num' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setMajorAreaNum(int value) {
      validate(fields()[1], value);
      this.major_area_num = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'major_area_num' field has been set */
    public boolean hasMajorAreaNum() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'major_area_num' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearMajorAreaNum() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'minor_area_num' field */
    public java.lang.Integer getMinorAreaNum() {
      return minor_area_num;
    }
    
    /** Sets the value of the 'minor_area_num' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setMinorAreaNum(int value) {
      validate(fields()[2], value);
      this.minor_area_num = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'minor_area_num' field has been set */
    public boolean hasMinorAreaNum() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'minor_area_num' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearMinorAreaNum() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'time_since_turn_on' field */
    public java.lang.Integer getTimeSinceTurnOn() {
      return time_since_turn_on;
    }
    
    /** Sets the value of the 'time_since_turn_on' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setTimeSinceTurnOn(int value) {
      validate(fields()[3], value);
      this.time_since_turn_on = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'time_since_turn_on' field has been set */
    public boolean hasTimeSinceTurnOn() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'time_since_turn_on' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearTimeSinceTurnOn() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'unique_id' field */
    public java.lang.Long getUniqueId() {
      return unique_id;
    }
    
    /** Sets the value of the 'unique_id' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setUniqueId(long value) {
      validate(fields()[4], value);
      this.unique_id = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'unique_id' field has been set */
    public boolean hasUniqueId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'unique_id' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearUniqueId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'runtime' field */
    public java.lang.Long getRuntime() {
      return runtime;
    }
    
    /** Sets the value of the 'runtime' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setRuntime(long value) {
      validate(fields()[5], value);
      this.runtime = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'runtime' field has been set */
    public boolean hasRuntime() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'runtime' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearRuntime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'minType' field */
    public java.lang.CharSequence getMinType() {
      return minType;
    }
    
    /** Sets the value of the 'minType' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setMinType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.minType = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'minType' field has been set */
    public boolean hasMinType() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'minType' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearMinType() {
      minType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'majType' field */
    public java.lang.CharSequence getMajType() {
      return majType;
    }
    
    /** Sets the value of the 'majType' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setMajType(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.majType = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'majType' field has been set */
    public boolean hasMajType() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'majType' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearMajType() {
      majType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'item_sensed' field */
    public java.lang.CharSequence getItemSensed() {
      return item_sensed;
    }
    
    /** Sets the value of the 'item_sensed' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setItemSensed(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.item_sensed = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'item_sensed' field has been set */
    public boolean hasItemSensed() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'item_sensed' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearItemSensed() {
      item_sensed = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'subject_measured' field */
    public java.lang.CharSequence getSubjectMeasured() {
      return subject_measured;
    }
    
    /** Sets the value of the 'subject_measured' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setSubjectMeasured(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.subject_measured = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'subject_measured' field has been set */
    public boolean hasSubjectMeasured() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'subject_measured' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearSubjectMeasured() {
      subject_measured = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'sensor_location_name' field */
    public java.lang.CharSequence getSensorLocationName() {
      return sensor_location_name;
    }
    
    /** Sets the value of the 'sensor_location_name' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder setSensorLocationName(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.sensor_location_name = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'sensor_location_name' field has been set */
    public boolean hasSensorLocationName() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'sensor_location_name' field */
    public com.SerIoTics.data_generation.WaterSensor.Builder clearSensorLocationName() {
      sensor_location_name = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public WaterSensor build() {
      try {
        WaterSensor record = new WaterSensor();
        record.quantity = fieldSetFlags()[0] ? this.quantity : (java.lang.Float) defaultValue(fields()[0]);
        record.major_area_num = fieldSetFlags()[1] ? this.major_area_num : (java.lang.Integer) defaultValue(fields()[1]);
        record.minor_area_num = fieldSetFlags()[2] ? this.minor_area_num : (java.lang.Integer) defaultValue(fields()[2]);
        record.time_since_turn_on = fieldSetFlags()[3] ? this.time_since_turn_on : (java.lang.Integer) defaultValue(fields()[3]);
        record.unique_id = fieldSetFlags()[4] ? this.unique_id : (java.lang.Long) defaultValue(fields()[4]);
        record.runtime = fieldSetFlags()[5] ? this.runtime : (java.lang.Long) defaultValue(fields()[5]);
        record.minType = fieldSetFlags()[6] ? this.minType : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.majType = fieldSetFlags()[7] ? this.majType : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.item_sensed = fieldSetFlags()[8] ? this.item_sensed : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.subject_measured = fieldSetFlags()[9] ? this.subject_measured : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.sensor_location_name = fieldSetFlags()[10] ? this.sensor_location_name : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
